name: CDK Deploy

on:
  push:
    branches:
      - develop
      - main

concurrency:
  group: cdk-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install Python dependencies and CDK
        run: |
          npm install -g aws-cdk
          python -m pip install --use-feature=fast-deps --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.SA_CDK_DEPLOYUSER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SA_CDK_DEPLOYUSER_AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-west-2"

      - name: Set environment variables
        run: |
          if [ "$GITHUB_REF" == "refs/heads/develop" ]; then
            ENVIRONMENT="dev"
          elif [ "$GITHUB_REF" == "refs/heads/main" ]; then
            ENVIRONMENT="prod"
          else
            echo "Skipping workflow for branch $GITHUB_REF"
            exit 0
          fi
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_NUMBER=${{ secrets.AWS_ACCOUNT_NUMBER }}" >> $GITHUB_ENV

      - name: CDK synth
        run: cdk synth --require-approval=never

      - name: CDK deploy
        run: |
  STACKS=(
    "${ENVIRONMENT}-lan-party-services-info"
    "${ENVIRONMENT}-lan-party-services-core"
    "${ENVIRONMENT}-lan-party-services-quake3"
    "${ENVIRONMENT}-lan-party-services-ut99"
    "${ENVIRONMENT}-lan-party-services-ut2k4"
    "${ENVIRONMENT}-lan-party-services-teeworlds"
  )

  # Deploy the info stack in us-east-1
  STACK_NAME="${ENVIRONMENT}-lan-party-services-info"
  REGION="us-east-1"
  if aws cloudformation describe-stacks --stack-name $STACK_NAME --region $REGION; then
    cdk deploy $STACK_NAME --require-approval=never --region $REGION
  else
    echo "Stack $STACK_NAME does not exist in region $REGION. Skipping deployment."
  fi

  # Deploy the core stack first in us-east-2
  STACK_NAME="${ENVIRONMENT}-lan-party-services-core"
  REGION="us-east-2"
  CORE_STACK_EXISTS=false
  if aws cloudformation describe-stacks --stack-name $STACK_NAME --region $REGION; then
    cdk deploy $STACK_NAME --require-approval=never --region $REGION
    CORE_STACK_EXISTS=true
  else
    echo "Stack $STACK_NAME does not exist in region $REGION. Skipping deployment."
  fi

  # Deploy the remaining stacks in us-east-2 only if the core stack exists
  if [ "$CORE_STACK_EXISTS" = true ]; then
    for STACK_NAME in "${STACKS[@]}"; do
      if [[ "$STACK_NAME" != *"info" && "$STACK_NAME" != *"core" ]]; then
        REGION="us-east-2"
        if aws cloudformation describe-stacks --stack-name $STACK_NAME --region $REGION; then
          cdk deploy $STACK_NAME --require-approval=never --region $REGION
        else
          echo "Stack $STACK_NAME does not exist in region $REGION. Skipping deployment."
        fi
      fi
    done
  fi
